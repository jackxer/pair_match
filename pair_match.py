#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sat Dec 10 05:03:59 2011

import wx
import wx.grid

import random
import time
import threading

# begin wxGlade: extracode
# end wxGlade



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.grid_sizer_status_staticbox = wx.StaticBox(self, -1, "Status")
        self.radio_box_class = wx.RadioBox(self, -1, "class", choices=["4x4", "6x6", "8x8"], majorDimension=0, style=wx.RA_SPECIFY_COLS)
        self.radio_box_graph = wx.RadioBox(self, -1, "graph", choices=[u"阿狸", "cat", "ami", "dog"], majorDimension=0, style=wx.RA_SPECIFY_COLS)
        self.panel_graph = wx.Panel(self, -1)
        self.Clicks = wx.StaticText(self, -1, "Clicks", style=wx.ALIGN_CENTRE|wx.ST_NO_AUTORESIZE)
        self.clicks_data = wx.TextCtrl(self, -1, "")
        self.Time = wx.StaticText(self, -1, "Time", style=wx.ALIGN_CENTRE|wx.ST_NO_AUTORESIZE)
        self.time_data = wx.TextCtrl(self, -1, "")
        self.Display = wx.Button(self, -1, "Display")
        self.Replay = wx.Button(self, -1, "Replay")
        self.Rechoose = wx.Button(self, -1, "Rechoose")
        self.Quit = wx.Button(self, -1, "Quit")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBOX, self.OnSelectClass, self.radio_box_class)
        self.Bind(wx.EVT_RADIOBOX, self.OnSelectGraph, self.radio_box_graph)
        self.Bind(wx.EVT_BUTTON, self.OnDisplay, self.Display)
        self.Bind(wx.EVT_BUTTON, self.OnReplay, self.Replay)
        self.Bind(wx.EVT_BUTTON, self.OnRechoose, self.Rechoose)
        self.Bind(wx.EVT_BUTTON, self.OnQuit, self.Quit)
        # end wxGlade

        self.current_image_id = 0
        self.last_image_id = -1
        self.clicks_cnt = 0
        self.pic_dict = []
        self.class_mode = 4
        self.graph_grid = wx.FlexGridSizer(self.class_mode, self.class_mode, 2, 2)
        #self.pic_path = '/home/poembean/Dropbox/wx/pic/'
        self.pic_path = './pic/one/'
        self.pics = ['tutu1.jpg', 'tutu2.jpg']
        self.class_map = {0:4, 1:6, 2:8}       #0: 4x4, 1: 6x6, 2: 8x8

        self.pic_width = 100
        self.pic_height = 120

        self.display_image(self.class_mode)

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_2")
        self.radio_box_class.SetSelection(0)
        self.radio_box_graph.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        grid_sizer_top = wx.FlexGridSizer(3, 1, 0, 0)
        grid_sizer_button = wx.GridSizer(1, 4, 0, 0)
        grid_sizer_mid = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_status = wx.StaticBoxSizer(self.grid_sizer_status_staticbox, wx.HORIZONTAL)
        grid_sizer_status_content = wx.FlexGridSizer(4, 2, 0, 0)
        grid_sizer_class = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_class.Add(self.radio_box_class, 0, wx.EXPAND, 0)
        grid_sizer_class.Add(self.radio_box_graph, 0, wx.EXPAND, 0)
        grid_sizer_class.AddGrowableCol(0)
        grid_sizer_top.Add(grid_sizer_class, 1, wx.EXPAND, 0)
        grid_sizer_mid.Add(self.panel_graph, 1, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_status_content.Add(self.Clicks, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_status_content.Add(self.clicks_data, 0, 0, 0)
        grid_sizer_status_content.Add(self.Time, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_status_content.Add(self.time_data, 0, 0, 0)
        grid_sizer_status.Add(grid_sizer_status_content, 1, wx.EXPAND, 0)
        grid_sizer_mid.Add(grid_sizer_status, 1, wx.EXPAND, 0)
        grid_sizer_mid.AddGrowableRow(0)
        grid_sizer_mid.AddGrowableCol(0)
        grid_sizer_top.Add(grid_sizer_mid, 1, wx.EXPAND, 0)
        grid_sizer_button.Add(self.Display, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_button.Add(self.Replay, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_button.Add(self.Rechoose, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_button.Add(self.Quit, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_top.Add(grid_sizer_button, 1, wx.EXPAND, 0)
        self.SetSizer(grid_sizer_top)
        grid_sizer_top.Fit(self)
        grid_sizer_top.AddGrowableRow(1)
        grid_sizer_top.AddGrowableCol(0)
        self.Layout()
        # end wxGlade

    def OnDisplay(self, event): # wxGlade: MyFrame.<event_handler>
        print "OnDisplay ..."
        self.graph_grid.Hide(self.pic_bitmap[15])
        self.graph_grid.Layout()
        # self.panel_graph.SetSizerAndFit(self.graph_grid)
        print "before"
        time.sleep(5)
        print "after"
        self.graph_grid.Hide(self.pic_bitmap[14])
        return
    
        for i in xrange(self.class_mode**2):
            self.graph_grid.Hide(self.pic_bitmap[i])


        time.sleep(5)           #3 second
        
        for i in xrange(self.class_mode**2):
            self.graph_grid.Show(self.pic_bitmap[i])

    def OnReplay(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnReplay' not implemented!"
        event.Skip()

    def OnRechoose(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnRechoose' not implemented!"
        event.Skip()

    def OnQuit(self, event): # wxGlade: MyFrame.<event_handler>
        self.Close()

    def gen_pic_dict(self, positions_num):
        random_number = []
        for i in range(positions_num):
            random_number += [random.randrange(0, len(self.pics))]


        
        return random_number

    def hide_one_image(self, index):
       self.graph_grid.Hide(self.pic_bitmap[index])

    # def diaplay_back_one_image(self, index):
    #     pic_back_name = self.pic_path + '../back.jpg'
    #     img = wx.Image(pic_back_name, wx.BITMAP_TYPE_ANY)
    #     img = img.Rescale(self.pic_width, self.pic_height)
    #     self.pic_bitmap[index] = wx.StaticBitmap(self.panel_graph, i, wx.BitmapFromImage(img))
    #     self.pic_bitmap[i].Bind(wx.EVT_LEFT_UP, self.OnImageClick)
    #     self.graph_grid.Add(self.pic_bitmap[i])
        
        
    def display_image(self, n):
        '''n: stands for nxn size of images.
        '''
        self.pic_dict = self.gen_pic_dict(n*n)
        pic_name = [self.pic_path + self.pics[i] for i in self.pic_dict]
        self.graph_grid.DeleteWindows()
        self.graph_grid = wx.FlexGridSizer(n, n, 2, 2)
        self.pic_bitmap = range(n*n)      #init pic_bitmap, there are nxn pic bitmaps
        (w, h) = self.panel_graph.GetSize()
        print w, h
        self.pic_width = w/n-2
        self.pic_height = h/n-2
        
        for i in range(n*n):
            img = wx.Image(pic_name[i], wx.BITMAP_TYPE_ANY)
            # img = img.Rescale(self.pic_width, self.pic_height)
            img = img.Rescale(self.pic_width, self.pic_height)
            self.pic_bitmap[i] = wx.StaticBitmap(self.panel_graph, i, wx.BitmapFromImage(img))
            self.pic_bitmap[i].Bind(wx.EVT_LEFT_UP, self.OnImageClick)
            self.graph_grid.Add(self.pic_bitmap[i])
        self.panel_graph.SetSizerAndFit(self.graph_grid)
        
    def OnSelectClass(self, event): # wxGlade: MyFrame.<event_handler>
        print "OnSelectClass ..."
        sel_class = self.radio_box_class.GetSelection()
        self.class_mode = self.class_map[sel_class]
        self.display_image(self.class_mode)

    
        
    def OnSelectGraph(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnSelectGraph' not implemented"
        event.Skip()
        
    def OnImageClick(self, event):
        print "OnImageClick ..."
        self.clicks_cnt +=1
        self.clicks_data.SetValue("%s" % (self.clicks_cnt))

        print "###########################"
        print "click cnt is     :", self.clicks_cnt
        print "current image id :", self.current_image_id
        print "last image id    :", self.last_image_id
        
        self.current_image_id = event.GetId()
        if self.current_image_id >= 0:
            current_image = self.pic_dict[self.current_image_id]
        else:
            current_image = -1

        if self.last_image_id >= 0:
            last_image = self.pic_dict[self.last_image_id]
        else:
            last_image = -1

        print "current image name :", current_image
        print "last image name    :", last_image

        if (self.clicks_cnt > 0 and
            (current_image == last_image) and
            (self.current_image_id != self.last_image_id)):
            
            self.pair_match(self.current_image_id, self.last_image_id)
            self.last_image_id = -1
        else:
            print "555"
            self.last_image_id = self.current_image_id

        # print event.GetId()
        # print event.GetEventObject().GetId()
            
    def pair_match(self, current_image_id, last_image_id):
       print "pair_match"
       
       # self.graph_grid.Hide(self.pic_bitmap[self.current_image_id])
       # self.graph_grid.Hide(self.pic_bitmap[self.last_image_id])
       self.hide_one_image(self.current_image_id)
       self.hide_one_image(self.last_image_id)
    
# end of class MyFrame


class MyFrame1(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame1.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.list_box_1 = wx.ListBox(self, -1, choices=[])

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame1.__set_properties
        self.SetTitle("frame_2")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame1.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.list_box_1, 0, 0, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame1



class Timer(threading.Thread):
    def __init__(self, seconds):
        self.runTime = seconds
        threading.Thread.__init__(self)
        def run(self):
            time.sleep(self.runTime)
            print "Buzzzz!! Time's up!"


if __name__ == "__main__":
    if vars().has_key('app'):
        del app

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame = MyFrame(None, -1, "")
    app.SetTopWindow(frame)
    frame.Show()
    app.MainLoop()
